package flow.subflow.selfserve;

import java.util.HashMap;

import com.General.Load;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JAN-03  02:39:30 PM
 */
public class callmethod extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JAN-03  02:39:30 PM
	 */
	public callmethod() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("selfserve-resettrans", "Default");
		next.setDebugId(15);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		String method ="";
		Load load = new Load();
		try {
		
		HashMap<String,Object> flow= (HashMap<String, Object>) mySession.getVariableField("HashMap", "Flow").getObjectValue();
		String NodeDescription = mySession.getVariableField("ApplicationVariable", "NodeDescription").getStringValue();
		HashMap<String,Object> flowvalues = (HashMap<String, Object>) flow.get(NodeDescription);
		method = flowvalues.get("MethodName").toString();
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "method name in Consent update \t|\trequestBegin\t|\t"+method, mySession);
		if(method==null || method.isEmpty() || method.equalsIgnoreCase("NA")) {
			method = "getVbSelfServe";
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "method name in Consent update is not available so method set as "+method, mySession);
		}else {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "method name in Consent update is available "+method, mySession);
		}
		
		}
		catch(Exception e) {
			method = "getVbSelfServe";
		}
		//need to validate
		method = "getVbSelfServe";
		HashMap<String,String> customerDetails = new HashMap<String,String>();
		
		customerDetails = (HashMap<String, String>) mySession.getVariableField("HashMap", "customerDetails").getObjectValue();
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "customerDetails from IVR at the end of vbselfserve check : "+customerDetails.toString(),mySession);
		load.values(method, mySession);
		
		
	

		super.requestBegin(mySession);
	
	}
}
