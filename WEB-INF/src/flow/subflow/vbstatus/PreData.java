package flow.subflow.vbstatus;

import java.util.HashMap;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GlobalConstant;
import flow.IProjectVariables;
//import flow.JSONObject;
//import flow.Logger;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-22  09:05:48 AM
 */
public class PreData extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-22  09:05:48 AM
	 */
	public PreData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("vbstatus-CHECKVBSTATUS", "Default");
		next.setDebugId(11);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ID).setValue("NA");
		mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ROLE).setValue("NA");
		mySession.getVariableField(IProjectVariables.VC__WORK__REQUEST__ID).setValue("NA");

		mySession.setProperty("DEELG", "NA");
		mySession.setProperty("RJELG", "NA");
		mySession.setProperty("token", GlobalConstant.TOKEN);
		mySession.setProperty("vbmap", "NA");
		mySession.setProperty("VB_ENROLL_STATUS",GlobalConstant.FAILURE);
		
		HashMap<String,String> customerDetails = (HashMap<String, String>) mySession.getVariableField("HashMap", "customerDetails").getObjectValue();
		customerDetails.put(GlobalConstant.VB_Enrollment_Failed, "NA");
		customerDetails.put(GlobalConstant.Verified_via_vb, "NA");
		customerDetails.put(GlobalConstant.De_enrolled_caller_from_Vb, "NA");
		customerDetails.put(GlobalConstant.VB_enrollment_status, "NA");
		customerDetails.put(GlobalConstant.VB_enrollment_status_date, null);
		customerDetails.put(GlobalConstant.VB_verification_status, "NA");
		customerDetails.put(GlobalConstant.VB_verification_status_date, null);
		
		mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_COUNTRYCODE).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_EMAIL).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MOBILE).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_SEGMENT).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_COUNTRYCODE).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_NAME).setValue("NA");
        mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_DO_B).setValue("NA");
        
		mySession.getVariableField(IProjectVariables.VBSTATUS).setValue("NA");
		mySession.getVariableField(IProjectVariables.VBSTATUSDATE).setValue("NA");
        
        String jsonString = mySession.getProperty("common").toString();
        TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Response From commonconfig JSON"+jsonString, mySession);
        JSONParser parser = new JSONParser();
        try {
            JSONObject jsonObject = (JSONObject) parser.parse(jsonString);

            // Iterate over the keys (property IDs)
            for (Object key : jsonObject.keySet()) {
                JSONObject propObj = (JSONObject) jsonObject.get(key);

                // Extract values from the property object
                String propName = (String) propObj.get("VC_PROP_NAME");
                String propValue = (String) propObj.get("VC_PROP_VALUE");

                // Print the values
                System.out.println("Property Name: " + propName);
                System.out.println("Property Value: " + propValue);
                System.out.println();
    			if("POST_CALIB".equalsIgnoreCase(propName)) {
    				mySession.getVariableField(IProjectVariables.POST__CALIBRATION).setValue(propValue);
    			}else if("SELFSERVE".equalsIgnoreCase(propName)) {
    				mySession.getVariableField(IProjectVariables.VBSELFSERVE).setValue(propValue);
    			}else if("DE_ENROLL_DAYS".equalsIgnoreCase(propName)) {
    				mySession.getVariableField(IProjectVariables.DEENROLLDAYS).setValue(propValue);
    			}else if("RJ_DAYS".equalsIgnoreCase(propName)) {
    				mySession.getVariableField(IProjectVariables.REJECTDAYS).setValue(propValue);
    			}
            }
            
            mySession.getVariableField(IProjectVariables.ENROLLFAILED).setValue(false);
            mySession.getVariableField(IProjectVariables.ENROLLREJECT).setValue(false);
            mySession.getVariableField(IProjectVariables.ENROLLMAXTRIES).setValue(false);
            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "POST_CALIB : "+mySession.getVariableField(IProjectVariables.POST__CALIBRATION).getStringValue(), mySession);
            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "SELFSERVE : "+mySession.getVariableField(IProjectVariables.VBSELFSERVE).getStringValue(), mySession);
            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DE_ENROLL_DAYS : "+mySession.getVariableField(IProjectVariables.DEENROLLDAYS).getStringValue(), mySession);
            TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "RJ_DAYS : "+mySession.getVariableField(IProjectVariables.REJECTDAYS).getStringValue(), mySession);

            mySession.getVariableField(IProjectVariables.VBREASON).setValue("NA");
        } catch (ParseException e) {
            e.printStackTrace();
        }
        
		super.requestBegin(mySession);
	}
}
