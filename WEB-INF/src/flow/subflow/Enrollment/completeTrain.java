	package flow.subflow.Enrollment;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;

import org.json.JSONException;
import org.json.JSONObject;

import com.General.LoadApplicationProperties;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
//import com.scb.custom.HostDBLogging;
import com.util.GetStackTrace;
import com.util.GlobalConstant;
import com.util.NuanceConnector;
import com.util.Session;

import flow.IProjectVariables;
import javax.xml.soap.SOAPException;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2021-JAN-29  04:00:52 PM
 */
public class completeTrain extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2021-JAN-29  04:00:52 PM
	 */
	public completeTrain() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_EXCEPTION).setValue(true);
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_INDICATOR_STATUS).setValue(GlobalConstant.FAILURESHORTCODE);
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_TRF).setValue(GlobalConstant.TRFHOSTDOWN);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String strDate = formatter.format(new Date());
		boolean exceptionFlag=true;
		String status = "FAILURE";
		
		String sessionId = mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_SESSION_ID).getStringValue();

		try {

			HashMap<String, Object> map = new HashMap<>();
			map.put("configSetName", GlobalConstant.CONFIGSETNAME);//mySession.getVariableField(IProjectVariables.CONFIG_SET_NAME, IProjectVariables.CONFIG_SET_NAME_FIELD_LANGUAGE_SPECIFIC_CONFIG_SET_NAME).getStringValue());
			map.put("speakerId", mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).getStringValue());
			map.put("sessionId", sessionId);
			map.put("voiceprintTag", GlobalConstant.VOICEPRINTTAG);

			String method = LoadApplicationProperties.getProperty("Train", mySession);
			JSONObject object = NuanceConnector.startConnect(map, method, "",mySession);

			JSONObject trainResult;

			trainResult = object.getJSONObject("soap:Envelope").getJSONObject("soap:Body")
					.getJSONObject("TrainResponse").getJSONObject("TrainResult");

			/*mySession.setProperty("trainResult", trainResult);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "!!!!!!trainResult  ::::   ::::::"
					+ trainResult, mySession);*/
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "!!!!!!RequestId: " + trainResult.get("RequestId"), mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "!!!!!!TrainReason: " + trainResult.get("TrainReason"), mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "!!!!!!TrainStatus: " + trainResult.get("TrainStatus"), mySession);
			
			mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_TRAIN_STATUS).setValue(trainResult.get("TrainStatus"));
			mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_EXCEPTION).setValue(false);
			mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_TRF).setValue("NA");
			exceptionFlag=false;
			status = "SUCCESS";
			if((GlobalConstant.getEnrollResponseShortCode(trainResult.get("TrainReason").toString())) != null) {
				String reason = GlobalConstant.getEnrollResponseShortCode(trainResult.get("TrainReason").toString());
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "**** TrainReason Short Code: " + reason, mySession);
				mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_INDICATOR_STATUS).setValue(reason);
			}
			
			if(!"Succeeded".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_TRAIN_STATUS).getStringValue()) ||
					!"Trained".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_TRAIN_STATUS).getStringValue())
					) {
				//VBREASON
				mySession.getVariableField(IProjectVariables.VBREASON).setValue(
						mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_TRAIN_STATUS).getStringValue());
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "**** VB Failed during Train api " , mySession);
			}else {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "**** VB Succeeded during Train api " , mySession);
			}
			

			
			
			//mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_INDICATOR_STATUS).setValue(GlobalConstant.SUCCESSSHORTCODE);
		} catch (UnsupportedOperationException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!UnsupportedOperationException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (SOAPException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!SOAPException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (JSONException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!JSONException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (IOException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!IOException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!Exception :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		}
		status =mySession.getVariableField(IProjectVariables.TRAIN_WS, IProjectVariables.TRAIN_WS_FIELD_TRAIN_STATUS).getStringValue();
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_INFO, "trainStatus: " + status);
		Session s = new Session();
		if(status.equalsIgnoreCase("Trained") || status.equalsIgnoreCase("Succeeded")) {
		
			s.setApplicationData(mySession);	
			s.endSession(mySession);
				
		}else {
				s.deleteAllEnrollSegments(mySession);
				s.endSession(mySession);
			
		}
		//String endDate = formatter.format(new Date());
		//HostDBLogging.updateDB(exceptionFlag, "Train", strDate, endDate, status, mySession);

		super.requestBegin(mySession);
	}
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "TrainWS:exception", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(375)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-networkfailureannouncement", "hostDownRexception").setDebugId(376));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "TrainWS:trainStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Succeeded", false).setDebugId(561)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("vbContextStore:vbStatus", "Success", true).setDebugId(563));
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-enrollsuccessannouncement", "success").setDebugId(562));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "TrainWS:trainStatus", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "Trained", false).setDebugId(377)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("vbContextStore:vbStatus", "Success", true).setDebugId(378));
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-enrollsuccessannouncement", "success").setDebugId(379));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("vbContextStore:vbStatus", "Failure", true).setDebugId(381));
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-enrollfailureannouncement", "failure").setDebugId(382));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
