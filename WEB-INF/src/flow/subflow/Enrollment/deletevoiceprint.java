package flow.subflow.Enrollment;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;

import javax.xml.soap.SOAPException;

import org.json.JSONException;
import org.json.JSONObject;

import com.General.LoadApplicationProperties;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GetStackTrace;
import com.util.GlobalConstant;
import com.util.NuanceConnector;
import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-26  09:14:21 AM
 */
public class deletevoiceprint extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-26  09:14:21 AM
	 */
	public deletevoiceprint() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:36 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:36 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:36 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "startSessionWS:exception", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "false", false).setDebugId(482)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-preenrollannouncement", "success").setDebugId(133));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("Enrollment-networkfailureannouncement", "failure").setDebugId(484));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		try 
		{
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "UCID: "+mySession.getVariableField(IProjectVariables.SESSION, IProjectVariables.SESSION_FIELD_UCID).getStringValue(), mySession);

		mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_TRF).setValue(GlobalConstant.TRFHOSTDOWN);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String strDate ="";
		boolean exceptionFlag=true;
		String status = "FAILURE";
		String responseCode = "";
		
		Date date = new Date();
		strDate = formatter.format(date);

	
		HashMap<String, Object> map = new HashMap<>();
		map.put("sessionId", mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_SESSION_ID).getStringValue());
		map.put("configSetName", GlobalConstant.CONFIGSETNAME);
		map.put("speakerId", mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).getStringValue());//FFP Number
		map.put("voiceprintTag",GlobalConstant.VOICEPRINTTAG);
		JSONObject StartSessionResult;
		try {
			mySession.getVariableField(IProjectVariables.VB_INPUTS, IProjectVariables.VB_INPUTS_FIELD_WS_URL).setValue(GlobalConstant.PRIMARYURL);
			// Hit Nuance End point
			String method = LoadApplicationProperties.getProperty("DeleteVoiceprint", mySession);
			JSONObject object = NuanceConnector.startConnect(map, method, "",mySession);
			responseCode = mySession.getVariableField(IProjectVariables.RESPONSE_CODE).getStringValue();
			if("200".equalsIgnoreCase(responseCode)) {
				mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(false);
			}
//			if(object == null || responseCode == null || !responseCode.equalsIgnoreCase("200") || responseCode.isEmpty()) {
//				mySession.getVariableField(IProjectVariables.VB_INPUTS, IProjectVariables.VB_INPUTS_FIELD_WS_URL).setValue(GlobalConstant.SECONDARYURL);
//                object = NuanceConnector.startConnect(map, method, "",mySession);
//                responseCode = mySession.getVariableField(IProjectVariables.RESPONSE_CODE).getStringValue();
//                if(object == null || responseCode == null || !responseCode.equalsIgnoreCase("200") || responseCode.isEmpty()) {
//                	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Down or Unable to execute api correctly using both the url ");
//                }else {
//                	mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(false);
//                	TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " Executed using Secondary URL: ",mySession);
//                	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Executed using Secondary URL: ");
//                }
//			}
//			else {
//				if(object == null || responseCode == null || !responseCode.equalsIgnoreCase("200") || responseCode.isEmpty()) {
//                	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Host Down or Unable to execute api correctly using both the url ");
//                }else {
//                	mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(false);
//                	mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Executed using primary URL");
//                }
//				
//            }
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Response Code : "+responseCode);
//			if(object.getJSONObject("soap:Envelope")!=null) {
//				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " Has Envelope" , mySession);
//			}else {
//				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " does not have Envelope" , mySession);
//			}
			//mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, " StartSessionResult : "+StartSessionResult.toString());
			
			
			
			
		} catch (UnsupportedOperationException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!UnsupportedOperationException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (SOAPException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!SOAPException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (JSONException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!JSONException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (IOException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!IOException :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!Exception :::" + GetStackTrace.getMessage(e), mySession);
			exceptionFlag=true;
			status = "EXCEPTION";
		}
		
		
		HashMap<String, String> CallHistory = new HashMap<String, String>();
		CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
		String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
		if("TRUE".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.START_SESSION_WS,IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).getStringValue())) {
			MenuDescription += "VB_ENROLLMENT_DELETEVOICEPRINT_FAILED" + "|";
		}else {
			MenuDescription += "VB_ENROLLMENT_DALETEVOICEPRINT_SUCCEDED" + "|";
		}
		
		
		
		
		CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
		
		
		
	}
	catch(Exception e) {
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error\t|\t delete voice print in enrollment process \t|\t"+ Arrays.toString(e.getStackTrace()), mySession);
	}		
		
		super.requestBegin(mySession);
	
	}
	
	
//	@Override
//	public void requestBegin(SCESession mySession) {
//		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//		HashMap<String, String> CallHistory = new HashMap<String, String>();
//		CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
//		String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
//		if("TRUE".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.START_SESSION_WS,IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).getStringValue())) {
//			MenuDescription += "VB_ENROLLMENT_DELETEVOICEPRINT_FAILED" + "|";
//		}else {
//			MenuDescription += "VB_ENROLLMENT_DALETEVOICEPRINT_SUCCEDED" + "|";
//		}
//		CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
//		String endDate = formatter.format(new Date());
//		//HostDBLogging.updateDB(exceptionFlag, "StartSession", strDate, endDate, status, mySession);
//		
//		RESTSession rs = new RESTSession();
//		try {
//			rs.deleteVoicePrint(mySession);
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		} catch (JSONException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		super.requestBegin(mySession);
//	}
}
