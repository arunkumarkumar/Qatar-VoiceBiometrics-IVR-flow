package flow.subflow.Enrollment;

import java.util.HashMap;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GlobalConstant;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-26  09:07:10 AM
 */
public class disclaimerupdate extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-26  09:07:10 AM
	 */
	public disclaimerupdate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Enrollment-UPDATEIVRDB_CONSENT_MAXTRIES", "Default");
		next.setDebugId(106);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:40 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
	
		mySession.setProperty("VB_ENROLL_STATUS","CONCERN_MAXTRIES");
		HashMap<String, String> CallHistory = new HashMap<String, String>();
		CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
		
		String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
		MenuDescription += "VB_ENROLLMENT_CONSENT_MENU_RETRY_MAXTRIES" + "|";
		
		CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
		
		
		HashMap<String,String> customerDetails = new HashMap<String,String>();
		customerDetails = (HashMap<String, String>) mySession.getVariableField("HashMap", "customerDetails").getObjectValue();
		
		String vbstatus = customerDetails.get(GlobalConstant.VB_enrollment_status).toString();
		String statusdate = customerDetails.get(GlobalConstant.VB_enrollment_status_date);
		
		mySession.getVariableField(IProjectVariables.ENROLLMAXTRIES).setValue(true);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "VB enrollment status  : "+vbstatus,mySession);
		
		if("true".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.CONNECTBACK).getStringValue()))//check if this is a transfer CAll
		{
			if( vbstatus == null || "NA".equalsIgnoreCase(vbstatus) || "null".equalsIgnoreCase(vbstatus)) {
				customerDetails.put(GlobalConstant.VB_enrollment_status,"Consent Maxtries on Agent Assisted");
			}else if("Enroll Rejected on IVR".equalsIgnoreCase(vbstatus)) {
				customerDetails.put(GlobalConstant.VB_enrollment_status,"Consent Maxtries on IVR and Agent Assisted");
			}else if("Enroll Reject on IVR and Agent Assisted".equalsIgnoreCase(vbstatus)) {
				customerDetails.put(GlobalConstant.VB_enrollment_status,"Consent Maxtries on IVR and Agent Assisted");
			}
			else {
				customerDetails.put(GlobalConstant.VB_enrollment_status,"Consent Maxtries on IVR and Agent Assisted");
			}
			
		}else {
			customerDetails.put(GlobalConstant.VB_enrollment_status,"Consent Maxtries on IVR");

		}
		customerDetails.put(GlobalConstant.VB_Enrollment_Failed, "YES");
		customerDetails.put(GlobalConstant.Verified_via_vb, "NA");
		customerDetails.put(GlobalConstant.De_enrolled_caller_from_Vb, "NO");
		//customerDetails.put(GlobalConstant.VB_enrollment_status, "NO");
		
		//customerDetails.put(GlobalConstant.VB_enrollment_status_date, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString());
		customerDetails.put(GlobalConstant.VB_verification_status, "NA");
		customerDetails.put(GlobalConstant.VB_verification_status_date, "NA");
		//customerDetails.put("VB_Status","RJ");
		//customerDetails.put("VB_Status_Date",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString());
		
		mySession.getVariableField(IProjectVariables.VBREASON).setValue("MAXTRIES AT THE CONSENT MENU");
		super.requestBegin(mySession);
	}
}
