package flow.subflow.postverify;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Random;

import org.json.JSONObject;

import com.General.LoadApplicationProperties;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
//import com.scb.custom.HostDBLogging;
import com.util.EncodeFileToBase64Binary;
import com.util.GlobalConstant;
import com.util.NuanceConnector;
import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2021-JAN-27  05:18:09 PM
 */
public class vbAuthenticate extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2021-JAN-27  05:18:09 PM
	 */
	public vbAuthenticate() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	@Override
	public void requestBegin(SCESession mySession) {
		mySession.setProperty(GlobalConstant.ISAUTHENTICATED, "false");
		mySession.getVariableField(IProjectVariables.VERIFY).setValue("false");
		mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_MATCH).setValue(false);
		mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_EXCEPTION).setValue(true);
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_ID).setValue(GlobalConstant.ENROLLEDSHORTCODE);// Enrolled
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_INDICATOR_STATUS).setValue(GlobalConstant.FAILURESHORTCODE);
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_TRF).setValue(GlobalConstant.TRFHOSTDOWN);
		/**This field used to update IVR DB**/
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VB_ASSISTED).setValue("Authentication");
		mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_VB_STATUS).setValue(GlobalConstant.FAILURE);
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String strDate = formatter.format(new Date());
		boolean exceptionFlag=true;

		String sessionId = mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_SESSION_ID).getStringValue();

		String[] fileName = mySession.getVariableField(IProjectVariables.AUTHENTICATE_VOICE, IProjectVariables.AUTHENTICATE_VOICE_FIELD_VALUE).getStringValue().split("/");
		String audio = fileName[fileName.length-1];
		//System.out.println("Audio File Name: " + audio);

		try {
			String IP = InetAddress.getLocalHost().getHostAddress();

			String URL = audio.replace("localhost", IP);
			File file = new File(URL);
			String ENC_URL = "";
			//System.out.println("Audio File Path: "+mySession.getAbsoluteTempDirPath().concat("/").concat(file.getName()));
			/*if (audio.isEmpty()) {
					//APIProperties properties=new APIProperties();
					ENC_URL = EncodeFileToBase64Binary.encodeFileToBase64Binary(properties.getProperty(mySession,"EngDir").concat("/temp.wav"));
				} else {
					ENC_URL = EncodeFileToBase64Binary.encodeFileToBase64Binary(mySession.getAbsoluteTempDirPath().concat("/").concat(file.getName()));
				}*/
			ENC_URL = EncodeFileToBase64Binary.encodeFileToBase64Binary(mySession.getAbsoluteTempDirPath().concat("/").concat(file.getName()));
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Encoded Audio : "+ENC_URL,mySession);
			HashMap<String, Object> map = new HashMap<>();
			map.put("sessionId", sessionId);
			map.put("speakerId", mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).getStringValue());//mySession.getVariableField(IProjectVariables.VB_INPUTS, IProjectVariables.VB_INPUTS_FIELD_REL_ID).toString());
			map.put("voiceprintTag", GlobalConstant.VOICEPRINTTAG);
			map.put("configSetName", GlobalConstant.CONFIGSETNAME);//mySession.getVariableField(IProjectVariables.CONFIG_SET_NAME, IProjectVariables.CONFIG_SET_NAME_FIELD_LANGUAGE_SPECIFIC_CONFIG_SET_NAME).getStringValue());
			map.put("audio", ENC_URL);
			map.put("text", GlobalConstant.VOICEPHRASE);
			String method = LoadApplicationProperties.getProperty("Verify", mySession);
			JSONObject object = NuanceConnector.startConnect(map, method, "",mySession);

			JSONObject VerifyResult;
			
			if(object.getJSONObject("soap:Envelope").getJSONObject("soap:Body").has("VerifyResponse")) {
				
				VerifyResult = object.getJSONObject("soap:Envelope").getJSONObject("soap:Body")
						.getJSONObject("VerifyResponse").getJSONObject("VerifyResult");
				/*verifyOutput.put("RequestId", VerifyResult.getJSONObject("RequestId").get("content"));
						verifyOutput.put("AudioSegmentId", VerifyResult.getJSONObject("AudioSegmentId").get("content"));
						verifyOutput.put("Decision", VerifyResult.getJSONObject("Decision").get("content"));
						verifyOutput.put("DecisionReason", VerifyResult.getJSONObject("DecisionReason").get("content"));
						verifyOutput.put("SpeakerId", VerifyResult.getJSONObject("SpeakerId").get("content"));
						mySession.setProperty("verifyOutput", verifyOutput);*/

				//TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!verifyOutput  ::::   ::::::" + VerifyResult.getString("Decision"), mySession);

				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!Decision  :::: " + VerifyResult.get("Decision"), mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!DecisionReason  :::: " + VerifyResult.get("DecisionReason"), mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!RequestId  :::: " + VerifyResult.get("RequestId"), mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!SpeakerId  :::: " + VerifyResult.get("SpeakerId"), mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "!!!!!!AudioSegmentId  :::: " + VerifyResult.get("AudioSegmentId"), mySession);


				
				
				String decision = VerifyResult.get("Decision").toString();
				String decisionReason = VerifyResult.get("DecisionReason").toString();

				mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_DECISION).setValue(VerifyResult.get("Decision"));
				mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_DECISION_REASON).setValue(VerifyResult.get("DecisionReason"));
				mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_AUDIO_SEGMENT_ID).setValue(VerifyResult.get("AudioSegmentId"));
				mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_SPEAKER_ID).setValue(VerifyResult.get("SpeakerId"));
				mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_REQUEST_ID).setValue(VerifyResult.get("RequestId"));

				mySession.getVariableField(IProjectVariables.VBREASON).setValue(decision);
				if (decision.equalsIgnoreCase("Match")) {
					mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_MATCH).setValue(true);
					mySession.getVariableField(IProjectVariables.VERIFY).setValue("true");
					
					
				}
				else if (decision.equalsIgnoreCase("VoiceprintMismatch") || decision.equalsIgnoreCase("PlaybackIndication") ||
						decision.equalsIgnoreCase("SyntheticSpeechDetected") || decision.equalsIgnoreCase("NotSet") || decision.equalsIgnoreCase("AudioTooSoft")
						|| decision.equalsIgnoreCase("InvalidAudio")){
					mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_VOICE_MISMATCH).setValue(true);
					
					
				}else {
					mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_VOICE_MISMATCH).setValue(true);
	
				}
				//decision = "Inconclusive";
				if(decision.equalsIgnoreCase("Inconclusive")) {
					mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_INCONCLUSIVE_COUNT).setValue(
							mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_INCONCLUSIVE_COUNT).getIntValue() + 1 );
				}
				
				/*
				 * if((GlobalConstant.getAuthenticateResponseShortCode(decisionReason)) != null)
				 * { String reason =
				 * GlobalConstant.getAuthenticateResponseShortCode(decisionReason);
				 * TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,
				 * "**** decisionReason Short Code: " + reason, mySession);
				 * mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE,
				 * IProjectVariables.VB_CONTEXT_STORE_FIELD_VOICE_INDICATOR_STATUS).setValue(
				 * reason); }
				 */
				
			} else {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Received Failure Response From Nuance", mySession);
				if(object.getJSONObject("soap:Envelope").getJSONObject("soap:Body").has("soap:Fault")) {
					JSONObject text = object.getJSONObject("soap:Envelope").getJSONObject("soap:Body").getJSONObject("soap:Fault").
							getJSONObject("soap:Reason").getJSONObject("soap:Text");
					
					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Failure Response: " + text.getString("content"), mySession);
					mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_LOCKED).setValue(true);
				}
			}

			exceptionFlag=false;
			mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_EXCEPTION).setValue(false);
			mySession.getVariableField(IProjectVariables.VB_CONTEXT_STORE, IProjectVariables.VB_CONTEXT_STORE_FIELD_TRF).setValue("NA");
			
		} catch (IOException e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error\t|\tvbauthenticate\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);
			mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_EXCEPTION).setValue(false);
			/**To Handle No Input Annc**/
			mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_NOINPUT).setValue(true);
			mySession.getVariableField(IProjectVariables.VBREASON).setValue("EXCEPTION");
		} catch (Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!Exception ::: " + e, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error\t|\tvbauthenticate\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);
			mySession.getVariableField(IProjectVariables.AUTHENTICATE_WS, IProjectVariables.AUTHENTICATE_WS_FIELD_IS_VOICE_MISMATCH).setValue(true);
			mySession.getVariableField(IProjectVariables.VBREASON).setValue("EXCEPTION");
			

		}

		super.requestBegin(mySession);
	}
	
	
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "AuthenticateWS:isMatch", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(358)).evaluate(mySession)) {
			actions = new java.util.ArrayList(3);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AuthenticateWS:isMatch", "false", true).setDebugId(359));
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("vbContextStore:vbStatus", "Success", true).setDebugId(360));
			actions.add(new com.avaya.sce.runtime.Next("postverify-verifysuccessannounce", "Authenticated").setDebugId(361));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "AuthenticateWS:exception", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(353)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("postverify-hostdownannounce", "hostDownRexception").setDebugId(354));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "AuthenticateWS:isLocked", com.avaya.sce.runtime.Expression.IS_TRUE).setDebugId(355)).evaluate(mySession)) {
			actions = new java.util.ArrayList(2);
			actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Voice Print has been Locked", "").setDebugId(356));
			actions.add(new com.avaya.sce.runtime.Next("postverify-menunameverify", "voicePrintLocked").setDebugId(357));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.varoperations.Assign("AuthenticateWS:isVoiceMismatch", "false", true).setDebugId(363));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

			if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "AuthenticateWS:authenticateCount", com.avaya.sce.runtime.Expression.INT_LESS_THAN, "3", false).setDebugId(364)).evaluate(mySession)) {
				actions = new java.util.ArrayList(2);
				actions.add(new com.avaya.sce.runtime.varoperations.Increment("AuthenticateWS:authenticateCount").setDebugId(365));
				actions.add(new com.avaya.sce.runtime.Next("postverify-menunameverify", "retryAuthen").setDebugId(366));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

			} else {
				actions = new java.util.ArrayList(1);
				actions.add(new com.avaya.sce.runtime.varoperations.Assign("vbContextStore:vbStatus", "Failure", true).setDebugId(368));
				if(evaluateActions(actions, mySession)) {
					return true;
				}
				actions = null;

				if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition5", "AuthenticateWS:inconclusiveCount", com.avaya.sce.runtime.Expression.INT_EQUAL, "3", false).setDebugId(369)).evaluate(mySession)) {
					actions = new java.util.ArrayList(2);
					actions.add(new com.avaya.sce.runtime.tracking.TraceInfo(com.avaya.sce.runtimecommon.ITraceInfo.TRACE_LEVEL_DEBUG, "Inconclusive count is 3 | transferring the call main IVR to authentiate using other authentication factor", "").setDebugId(370));
					actions.add(new com.avaya.sce.runtime.Next("postverify-menunameverify", "inConclusive").setDebugId(371));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;

				} else {
					actions = new java.util.ArrayList(1);
					actions.add(new com.avaya.sce.runtime.Next("postverify-maxtryannounce", "maxtryExceeded").setDebugId(373));
					if(evaluateActions(actions, mySession)) {
						return true;
					}
					actions = null;
				}

			}

		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	public static void main(String[] args) {
		 // Creating an instance of Random
        Random random = new Random();

        // Generating a random integer
        int randomNumber = random.nextInt();

        System.out.println("Random Number: " + randomNumber);
	}
}
