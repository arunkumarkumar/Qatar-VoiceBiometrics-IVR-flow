package flow.subflow.Verify;

import java.util.HashMap;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GlobalConstant;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-25  05:40:56 AM
 */
public class LoadVBConfigValuesFromHost extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-25  05:40:56 AM
	 */
	public LoadVBConfigValuesFromHost() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Verify-CheckCalibration", "Default");
		next.setDebugId(123);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {


		try {

			HashMap<String,String>  App_Prop = new HashMap<String, String>();
			App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
			if(App_Prop != null) {
				
				
				String sudioPath = App_Prop.get("AudioLocation").toString();
				
				String nuancePrimaryURL = App_Prop.get("PRIMARYURL").toString();
//				String nuanceSecondaryURL = App_Prop.get("SECONDARYURL").toString();
				String nuanceWSNamespaceURL = App_Prop.get("NUANCE_WSNAMESPACE").toString();
				String nuanceWindowsUserName = App_Prop.get("NUANCE_WINDOWS_SERVER_USERNAME").toString();
				String nuanceWindowsPassword = App_Prop.get("NUANCE_WINDOWS_SERVER_PASSWORD").toString();
				String nuanceWindowsDomain = App_Prop.get("NUANCE_WINDOWS_SERVER_DOMAIN").toString();
				
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " VB NuancePrimaryURL: "+ nuancePrimaryURL , mySession);
//				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " VB NuanceSecondaryURL: "+ nuanceSecondaryURL  , mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " VB NuanceWSNamespaceURL: "+ nuanceWSNamespaceURL , mySession);
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " VB NuanceWindowsDomain: "+ nuanceWindowsDomain , mySession);

				GlobalConstant.PRIMARYURL = nuancePrimaryURL;
//				GlobalConstant.SECONDARYURL = nuanceSecondaryURL;
				GlobalConstant.NUANCE_WSNAMESPACE = nuanceWSNamespaceURL;
				GlobalConstant.NUANCE_WINDOWS_SERVER_USERNAME = nuanceWindowsUserName;
				GlobalConstant.NUANCE_WINDOWS_SERVER_PASSWORD = nuanceWindowsPassword;
				GlobalConstant.NUANCE_WINDOWS_SERVER_DOMAIN = nuanceWindowsDomain;
			} else {
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " VBConfig Controller was not loaded properly | We Receive 'null' from Host Jar " , mySession);
			}

		} catch (java.lang.Exception ex) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Exception "+com.util.GetStackTrace.getMessage(ex));
		}
		
		
		if(GlobalConstant.PRIMARYURL == null || (GlobalConstant.PRIMARYURL).equalsIgnoreCase("") || (GlobalConstant.PRIMARYURL).isEmpty()) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB NuancePrimary URL: " + GlobalConstant.PRIMARYURL , mySession);
		}
		
//		if(GlobalConstant.SECONDARYURL == null || (GlobalConstant.SECONDARYURL).equalsIgnoreCase("") || (GlobalConstant.SECONDARYURL).isEmpty()) {
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB NuanceSecondary URL: " + GlobalConstant.SECONDARYURL , mySession);
//		}
		
		if(GlobalConstant.NUANCE_WSNAMESPACE == null || (GlobalConstant.NUANCE_WSNAMESPACE).equalsIgnoreCase("") || (GlobalConstant.NUANCE_WSNAMESPACE).isEmpty()) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB NuanceWSNamespace URL: " + GlobalConstant.NUANCE_WSNAMESPACE , mySession);
		}
		
		if(GlobalConstant.NUANCE_WINDOWS_SERVER_USERNAME == null || (GlobalConstant.NUANCE_WINDOWS_SERVER_USERNAME).equalsIgnoreCase("") || (GlobalConstant.NUANCE_WINDOWS_SERVER_USERNAME).isEmpty()) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB Nuance Windows User Name: " + GlobalConstant.NUANCE_WINDOWS_SERVER_USERNAME , mySession);
		}
		
		if(GlobalConstant.NUANCE_WINDOWS_SERVER_PASSWORD == null || (GlobalConstant.NUANCE_WINDOWS_SERVER_PASSWORD).equalsIgnoreCase("") || (GlobalConstant.NUANCE_WINDOWS_SERVER_PASSWORD).isEmpty()) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB Nuance Windows Password: " + GlobalConstant.NUANCE_WINDOWS_SERVER_PASSWORD , mySession);
		}
		
		if(GlobalConstant.NUANCE_WINDOWS_SERVER_DOMAIN == null || (GlobalConstant.NUANCE_WINDOWS_SERVER_DOMAIN).equalsIgnoreCase("") || (GlobalConstant.NUANCE_WINDOWS_SERVER_DOMAIN).isEmpty()) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!!!!!!!!!!! VB Nuance Windows Domain: " + GlobalConstant.NUANCE_WINDOWS_SERVER_DOMAIN , mySession);
		}
		
		

		super.requestBegin(mySession);
	
	}
}
