package flow.subflow.preverify;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;

import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GlobalConstant;
import com.util.Session;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2023-DEC-27  02:40:34 PM
 */
public class TRIGGER_SMS_EMAIL_VERIFY_FAILURE extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-27  02:40:34 PM
	 */
	public TRIGGER_SMS_EMAIL_VERIFY_FAILURE() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("preverify-QR_UPDATE_VB_VERIFY", "Default");
		next.setDebugId(281);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:43 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {

		try {
	
		Session s = new Session();
		s.endSession(mySession);
		
		HashMap<String,String>  App_Prop = new HashMap<String, String>();
		App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
		String date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString();
		
		//sms not to be sent
		
			mySession.setProperty("VERIFIED_VIA_VB","FALSE");
			
		HashMap<String, String> CallHistory = new HashMap<String, String>();
		CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
		
		String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
		MenuDescription += "VB_VERIFICATION_VOICE_COLLECTION_FAILURE_SMS_FAILURE" + "|";
		CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
		
		
		
		String StartDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
		System.out.println("Date : "+StartDate);
		
	
		mySession.setProperty("VB_VERIFICATION_STATUS","FAILED");
		mySession.setProperty("VB_VERIFICATION_STATUS_DATE",StartDate);
		
		
		HashMap<String,String> customerDetails = new HashMap<String,String>();
		customerDetails = (HashMap<String, String>) mySession.getVariableField("HashMap", "customerDetails").getObjectValue();
		customerDetails.put(GlobalConstant.VB_Enrollment_Failed, "NA");
		//need to comment any one
		customerDetails.put(GlobalConstant.Verified_via_vb, "Failed");
		//customerDetails.put(GlobalConstant.Verified_via_vb, "YES");
		customerDetails.put(GlobalConstant.De_enrolled_caller_from_Vb, "NA");
		customerDetails.put(GlobalConstant.VB_enrollment_status, "NA");
		customerDetails.put(GlobalConstant.VB_enrollment_status_date, "NA");
		customerDetails.put(GlobalConstant.VB_verification_status, "NO");
		customerDetails.put(GlobalConstant.VB_verification_status_date, new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString());
		customerDetails.put("IsVerifiedCustomer", "N");
		
		
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "customerDetails from IVR : "+customerDetails.toString(),mySession);
		}
		catch(Exception e) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "Error\t|\trequestBegin\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);
		}
		super.requestBegin(mySession);
	
		
	}
}
