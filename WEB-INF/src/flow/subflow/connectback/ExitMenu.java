package flow.subflow.connectback;

import java.util.Collection;
import java.util.HashMap;

import com.avaya.sce.runtime.Prompt;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GlobalConstant;

import flow.IProjectVariables;

/**
 * Class that represents a menu.  A menu can contain prompts, choices and links
 * as well as handlers for various events that may occur while the menu is executing
 * Last generated by Orchestration Designer at: 2023-DEC-22  12:24:40 PM
 */
public class ExitMenu extends com.avaya.sce.runtime.Menu {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2023-DEC-22  12:24:40 PM
	 */
	public ExitMenu() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		setNeedsDefaultDisconnectHandler(false);
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the links for the node, override:
	 *     void updateLinks(Collection links, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return(list);
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the properties for the node, override:
	 *     void updateProperties(Collection properties, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return(list);
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the event handlers for the node, override:
	 *    void updateEvents(Collection events, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList(2);
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;

		// Item has no prompts associated
		eventPromptNames = new java.util.ArrayList();

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOINPUT, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("connectback-settingDisconnect", 0, true, "noinnp", java.util.Arrays.asList(new com.avaya.sce.runtime.CaptureExpression[] {new com.avaya.sce.runtime.CaptureExpression("retry:noinput", "_avayaNoinputCounter")})));
		list.add(event);

		// Item has no prompts associated
		eventPromptNames = new java.util.ArrayList();

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOMATCH, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("connectback-settingDisconnect", 0, true, "nomatch", java.util.Arrays.asList(new com.avaya.sce.runtime.CaptureExpression[] {new com.avaya.sce.runtime.CaptureExpression("retry:nomatch", "_avayaNomatchCounter")})));
		list.add(event);
		return(list);
	}
	/**
	 * Builds the list of choices for the menu.  This list is built
	 * automatically by the code generator and should not be edited
	 * manually.  Future code generation may overwrite any changes
	 * to this method.<br>
	 * To modify the list of choices, override:<br>
	 *    updateChoices(Collection choices, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public java.util.Collection getChoices(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Choice choice = null;
		java.util.Collection grammarInfo = null;
		list = new java.util.ArrayList(1);
		String ___tempGrammarName = null;

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();


		choice = new com.avaya.sce.runtime.Choice("ExitMenu", "1", true, "exact", "connectback-preparetransfer", grammarInfo, true);
		list.add(choice);

		return(list);
	}
	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of prompts for the flow item, override:
	 *     updatePrompts(Collection prompts, SCESession mySession)
	 * @return list of prompts for the menu
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// Item has no prompts associated
		list = new java.util.ArrayList();

		return(list);
	}
	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.
	 * @return list of tracking items for the item
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return(list);
	}
	
	@Override
	public void updatePrompts(Collection prompts, SCESession mySession) {

		
		try 
		{
			super.updatePrompts(prompts, mySession);
			Prompt Speak = new Prompt()
			{
				@Override
				public void buildPrompt()
				{
					
				}
			};
			Speak.setSession(mySession);
			com.avaya.sce.runtime.Format format = null;
			format = new com.avaya.sce.runtime.Format();
			format.add(com.avaya.sce.runtime.Format.FORMAT,com.avaya.sce.runtime.Format.FMT_FILEURL);
			String promptFullyQualifiedPath ;
			int phraseVarCounter = 0;
			String promptName="EXIT_MENU";
			HashMap<String,String>  App_Prop = new HashMap<String, String>();
			App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
			String sudioPath = App_Prop.get("AudioLocation").toString();
			String language = mySession.getVariableField("ApplicationVariable", "Language").getStringValue();
			promptFullyQualifiedPath= sudioPath +language+GlobalConstant.SEPARATOR_FORWARD_SLASH+promptName.trim()+GlobalConstant.EXTENSION_WAVE;
			phraseVarCounter = (phraseVarCounter+1);
			String phraseVarName = GlobalConstant.VAR_COMPLEX_PHRASEVAR+GlobalConstant.SEPARATOR_COLON+GlobalConstant.VAR_COMPLEX_PHRASEVAR_FIELD+(phraseVarCounter);
	 
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "********* wav ********* : "+phraseVarName);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "********* AudioLocation ********* : "+App_Prop.get("AudioLocation").toString());
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "********* Language ********* : "+language);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "********* promptFullyQualifiedPath ********* : "+promptFullyQualifiedPath);
			
			mySession.getVariableField(IProjectVariables.PHRASEVAR,GlobalConstant.VAR_COMPLEX_PHRASEVAR_FIELD+(phraseVarCounter)).setValue(promptFullyQualifiedPath);
			Speak.add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.VARIABLE_TEXT,phraseVarName, format));
			prompts.add(Speak);
		} 
		catch (java.lang.Exception ex) 
		{
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Exception "+ex);
		}
	
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		HashMap<String, String> CallHistory = new HashMap<String, String>();
		CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
		
		String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
		MenuDescription += "EXIT_MENU" + "|";
		
		CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
		super.requestBegin(mySession);
	}
}
