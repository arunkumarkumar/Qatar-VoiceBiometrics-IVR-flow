package flow.subflow.connectback;

import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;

import com.General.ApiCallFromExtJar;
import com.General.Load;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GetStackTrace;
import com.util.GlobalConstant;
import com.util.SMS;
import com.util.Nuance.VBHist;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-FEB-15  09:55:32 PM
 */
public class test extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-FEB-15  09:55:32 PM
	 */
	public test() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("connectback-settingDisconnect", "Default");
		next.setDebugId(184);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		String method ="";
		
//		try {
//			mySession.getVariableField("ApplicationVariable", "NodeDescription").setValue("CONNECTBACK");
//			Load load = new Load();
//			method = "getEnrollData";
//			load.values(method, mySession);
//		
//		}
//		catch(Exception e) {
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,"Exception while calling method getVbStatus", mySession);
//		}
		
//		try
//		{
//			String input = "2004-02-02T00:00:00";
//			String dayscount = "3";
//			HashMap<String,String>  App_Prop = new HashMap<String, String>();
//			App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
//			mySession.getVariableField(IProjectVariables.DATEFORMAT).setValue(App_Prop.get("dateformat"));
//		System.out.println(" date : "+input+" daysocunt : "+dayscount);
//		int days = Integer.parseInt(dayscount);
//		//String input = "06-01-2024 23:00:01";
//		//long DenrollDays = 3;
//		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(mySession.getVariableField(IProjectVariables.DATEFORMAT).getStringValue());
//		LocalDateTime customerTime = LocalDateTime.parse(input, formatter);
//		LocalDateTime eligibleTime = customerTime.toLocalDate().plusDays(days).atStartOfDay();
//		LocalDateTime currentTime = LocalDateTime.now();
//		Duration duration = Duration.between(currentTime, eligibleTime);
//		long daysDifference = duration.toDays();
//		long hoursDifference = duration.toHours() % 24;
//		long minutes = duration.toMinutes() % 60;
//		long seconds = duration.getSeconds() % 60;
//		if (daysDifference > 0) {
//			System.out.println("Not eligible yet.");
//		} else if (hoursDifference > 0) {
//			System.out.println("Not eligible yet.");
//		} else if (minutes > 0) {
//			System.out.println("Not eligible yet.");
//		} else if (seconds > 0) {
//			System.out.println("Not eligible yet.");
//		} else {
//		if (currentTime.isAfter(eligibleTime)) {
//			System.out.println("Eligible.");
//			mySession.setProperty("DEELG", "YES");
//			//mySession.getVariableField(IProjectVariables.VBSTATUSCODE).setValue(GlobalConstant.ELIGIBILESHORTCODE);
//		} else {
//			System.out.println("Not eligible yet.");
//		}
//		}
//		System.out.println("Days difference: " + daysDifference);
//		System.out.println("Hours difference: " + hoursDifference);
//		System.out.println("minutes difference: " + minutes);
//		System.out.println("seconds difference: " + seconds);
//		}
//		catch(Exception e) {
//			System.out.println("Exception "+e);
//		}
		
		
		ApiCallFromExtJar api = new ApiCallFromExtJar();
		mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).setValue("3555");
		mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_COUNTRYCODE).setValue("");
		mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MOBILE).setValue("1,2,3");
		mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_EMAIL).setValue("abc@gmail.com,bcd@yahoo.com,adsd@act.com");
		
		
		SMS s = new SMS();
		
		//s.VBPreferEmail(mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"\t|\t Mobile  \t|\t"+ mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MOBILE).getStringValue(),mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"\t|\t Email  \t|\t"+ mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_EMAIL).getStringValue(),mySession);
		api.VBPreferEmail(mySession);
		api.sendSMS(mySession, "ENS");
		api.sendMail(mySession, "vb_enr_success");
		//s.sendEmail("ENS", mySession);
		//s.sendSMS("ENF", mySession);
		 //try {
		//	Thread.sleep(10000);
		//} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			//e.printStackTrace();
		//} // 30 seconds in milliseconds
		 
		 
		//mock for testing
//			mySession.getVariableField(IProjectVariables.VBSTATUS).setValue("EL");
//			mySession.getVariableField(IProjectVariables.VBSTATUSDATE).setValue("2024-02-07 02:42:06.917");
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "VBSTATUS set as "+mySession.getVariableField(IProjectVariables.VBSTATUS),mySession);
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "VBSTATUSDATE is set as "+mySession.getVariableField(IProjectVariables.VBSTATUSDATE),mySession);
//			
//			VBHist vbhistory = new VBHist();
//			vbhistory.setDT_STATUS_UPDATE_DATE(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString());
//		 		vbhistory.setVC_CHANNEL("VOICE");
//		 		vbhistory.setVC_WORK_REQUEST_ID("");//obtained from agent
//			//default values
//			vbhistory.setVC_DE_ENROLL_REASON(GlobalConstant.NA);
//			vbhistory.setVC_DE_ENROLLED_AGENT_ID(GlobalConstant.NA);
//			vbhistory.setVC_DE_ENROLLED_AGENT_ROLE(GlobalConstant.NA);
//			
//			vbhistory.setVC_FFP_NUMBER(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).getStringValue());
//			vbhistory.setVC_FUNCTION_NAME("ENROLL_SUCCESS");
//			vbhistory.setVC_IDENTIFY_TYPE("TEST");//need to change to identified type
//			vbhistory.setVC_SEGMENT(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
//			vbhistory.setVC_STATUS(GlobalConstant.YES);
//			vbhistory.setVC_UCID(mySession.getVariableField("session", "ucid").getStringValue());
//			
//			vbhistory.setVC_TRANSFERRED_BY_AGENT_ID(mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ID).getStringValue());//obtained from agent
//			vbhistory.setVC_TRANSFERRED_BY_AGENT_ROLE(mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ROLE).getStringValue());//obtained from agent
//			
//			
//			
//			
//			if("DE".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue()) || "RJ".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue()))
//			{
//				checkeligibility(mySession);
//				if(GlobalConstant.ELIGIBILESHORTCODE.equalsIgnoreCase(mySession.getVariableField(IProjectVariables.VBSTATUSCODE).getStringValue())){
//					//eligible
//					vbhistory.setVC_VB_REASON("ELIGIBLE_CHECK");
//					vbhistory.setVC_FUNCTION_NAME("ELIGIBLE");
//				}else {
//					//not eligible
//					vbhistory.setVC_VB_REASON("ELIGIBLE_CHECK");
//					vbhistory.setVC_FUNCTION_NAME("NOT_ELIGIBLE");
//				}
//			}
//			else if("EL".equalsIgnoreCase(mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue())){
//				//eligible
//				vbhistory.setVC_VB_REASON("ELIGIBLE_CHECK");
//				vbhistory.setVC_FUNCTION_NAME("ELIGIBLE");
//			}else {
//				//not eligible
//				vbhistory.setVC_VB_REASON("ELIGIBLE_CHECK");
//				vbhistory.setVC_FUNCTION_NAME("NOT_ELIGIBLE");
//			}
//			
//			mySession.setProperty("vbmap", vbhistory);
//			
//			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "input sent from IVR : "+mySession.getProperty("vbmap").toString(),mySession);
//			
//			Load load = new Load();
//			method = "VBHistory";
//			load.values(method, mySession);
			
		super.requestBegin(mySession);
		

	}
	void checkeligibility(SCESession mySession) {
		String input = "";
		String dayscount ="";
		try
		{
		
			try
			{
			
			String vbStatus  = mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue();
			String DAYS = "";
			String DATE = mySession.getVariableField(IProjectVariables.VBSTATUSDATE).getStringValue();
			if("DE".equalsIgnoreCase(vbStatus)) {
				DAYS = mySession.getVariableField(IProjectVariables.DEENROLLDAYS).getStringValue();
			}else if("RJ".equalsIgnoreCase(vbStatus)) {
				DAYS = mySession.getVariableField(IProjectVariables.REJECTDAYS).getStringValue();
			}
				
				//deenroll(VB_DEENROLL_DATE, VB_DEENROLL_DAYS,mySession);
				
				//call the function
				input = DATE;
				dayscount = DAYS;
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " called eligibility check " , mySession);
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " STATUS:  "+mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue() , mySession);
			}
			catch(Exception e) {
				mySession.getVariableField(IProjectVariables.VBSTATUSCODE).setValue(GlobalConstant.FAILURESHORTCODE);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!Exception :::" + GetStackTrace.getMessage(e));
			}	
			
		HashMap<String,String>  App_Prop = new HashMap<String, String>();
		App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
		mySession.getVariableField(IProjectVariables.DATEFORMAT).setValue(App_Prop.get("dateformat"));			
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, " date : "+input+" daysocunt : "+dayscount ,mySession);
		int days = Integer.parseInt(dayscount);
		//String input = "06-01-2024 23:00:01";
		//long DenrollDays = 3;
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(mySession.getVariableField(IProjectVariables.DATEFORMAT).getStringValue());
		LocalDateTime customerTime = LocalDateTime.parse(input, formatter);
		LocalDateTime eligibleTime = customerTime.toLocalDate().plusDays(days).atStartOfDay();
		LocalDateTime currentTime = LocalDateTime.now();
		Duration duration = Duration.between(currentTime, eligibleTime);
		long daysDifference = duration.toDays();
		long hoursDifference = duration.toHours() % 24;
		long minutes = duration.toMinutes() % 60;
		long seconds = duration.getSeconds() % 60;
		if (daysDifference > 0) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Not eligible yet.",mySession);
		} else if (hoursDifference > 0) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Not eligible yet.",mySession);
		} else if (minutes > 0) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Not eligible yet.",mySession);
		} else if (seconds > 0) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Not eligible yet.",mySession);
		} else {
		if (currentTime.isAfter(eligibleTime)) {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Eligible.",mySession);
			mySession.setProperty("DEELG", "YES");
			mySession.getVariableField(IProjectVariables.VBSTATUSCODE).setValue(GlobalConstant.ELIGIBILESHORTCODE);
		} else {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Not eligible yet.",mySession);
		}
		}
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Days difference: " + daysDifference,mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "Hours difference: " + hoursDifference,mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "minutes difference: " + minutes,mySession);
		TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "seconds difference: " + seconds,mySession);
		}
		catch(Exception e) {
			mySession.getVariableField(IProjectVariables.VBSTATUSCODE).setValue(GlobalConstant.FAILURESHORTCODE);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR, "!!!!!!Exception :::" + GetStackTrace.getMessage(e));
		}
	}

	
	
	 public static void main(String[] args) {
	        String input = "ENGLISH";
	        String output = convertToTitleCase(input);
	        System.out.println(output);
	    }

	    public static String convertToTitleCase(String input) {
	        if (input == null || input.isEmpty()) {
	            return input;
	        }
	        return input.substring(0, 1).toUpperCase() + input.substring(1).toLowerCase();
	    }
}
