package flow.subflow.connectback;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.General.Load;
import com.General.LoadApplicationProperties;
import com.Oceana.Api;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.util.GetStackTrace;
import com.util.GlobalConstant;
import com.util.Nuance.VBHist;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2024-JAN-27  09:41:43 PM
 */
public class getUUIValues extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2024-JAN-27  09:41:43 PM
	 */
	public getUUIValues() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:24:21 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "startSessionWS:exception", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "false", false).setDebugId(161)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("connectback-getPNR", "success").setDebugId(162));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("connectback-preparetransfer", "failed").setDebugId(164));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	@Override
	public void requestBegin(SCESession mySession) {
		mySession.setProperty("contextId", "NA");
		mySession.getVariableField(IProjectVariables.CONTEXTID).setValue("NA");
		mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(false);

		try {	
		HashMap<String,String>  App_Prop = new HashMap<String, String>();
		App_Prop = (HashMap<String, String>) mySession.getVariableField("HashMap", "PropertyValue").getObjectValue();
		String uuiInbound ="";
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Actual UUI values are passed");
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "uuiInbound: "+uuiInbound);
		//mySession.getVariableField(IProjectVariables.NEXT_NODE).setValue("NA");
		uuiInbound = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UUI).getStringValue();		 		
		String dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
		String UUI_ASAI_START = App_Prop.get("UUI_ASAI_START").toString();
		if(uuiInbound.contains(UUI_ASAI_START)){

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,  "Transfer Back Call. Doing OCDS Hit",mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,  "Get UUI value inside init : " + uuiInbound,mySession);
			
			int start = uuiInbound.indexOf(UUI_ASAI_START);
			
			String uuiVal = uuiInbound.substring(start + UUI_ASAI_START.length(), uuiInbound.length());
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"UUI after initial Substring: " + uuiVal,mySession);
			if(uuiVal.contains(";"))
			{
				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"UUI Contains More Values",mySession);
				uuiVal = uuiVal.substring(0, uuiVal.indexOf(";"));
			}
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Final Encoded UUI String: " + uuiVal,mySession);
		
			byte [] txtInByte = new byte [uuiVal.length() / 2];
		    int j = 0;
		    for (int i = 0; i < uuiVal.length(); i += 2)
		    {
		           txtInByte[j++] = Byte.parseByte(uuiVal.substring(i, i + 2), 16);
		    }
		    String uui=new String(txtInByte);
		    
		    String contextId = uui.split(",")[0];
		    
		    TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO,"Context ID From UUI: " + contextId,mySession);
		    mySession.setProperty("contextId", contextId);
		    mySession.getVariableField(IProjectVariables.CONTEXTID).setValue(contextId);

				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---------------------------------ConnectBackCall-----------------------");
			    mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---------------------------------contextID-----------------------"+contextId);
				
				Api api = new Api();
				String resp = api.getContextData(contextId, mySession);
				
				JSONParser parser = new JSONParser();
				JSONObject jsonNode = null;
		            // Parse the JSON data into a JSONObject
		        	jsonNode = (JSONObject) parser.parse(resp);

				if(jsonNode!=null) {
				JSONObject customerObject = (JSONObject) jsonNode.get("data");
				JSONObject schemaObject = (JSONObject) jsonNode.get("schema");
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---------------------------------JSON SCHEMA MAP-----------------------"+customerObject.toJSONString());
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---------------------------------JSON MAP-----------------------"+jsonNode.toJSONString());

				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_COUNTRYCODE).setValue(parseJsonResponse(customerObject, GlobalConstant.CountryCode,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_EMAIL).setValue(parseJsonResponse(customerObject, GlobalConstant.Email,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).setValue(parseJsonResponse(customerObject, GlobalConstant.FFPNumber,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).setValue(parseJsonResponse(customerObject, GlobalConstant.CustomerTier,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MOBILE).setValue(parseJsonResponse(customerObject, GlobalConstant.CustomerNumber,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_SEGMENT).setValue(parseJsonResponse(customerObject, GlobalConstant.CustomerTier,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_NAME).setValue(parseJsonResponse(customerObject, GlobalConstant.CustomerName,mySession));
				mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_DO_B).setValue(parseJsonResponse(customerObject, "DoB",mySession));
				
				
				
				mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).setValue(parseJsonResponse(customerObject, "cli",mySession));
				
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Cli updated as : "+mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
				
				HashMap<String, String> CallHistory = new HashMap<String, String>();
				CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();
				
				String MenuDescription = CallHistory.get("VC_MENU_DESCRIPTION");
				MenuDescription += "GETUUIVALUES" + "|";
				
				CallHistory.put("VC_MENU_DESCRIPTION", MenuDescription);
				
				CallHistory.put("VC_CLI_NO", mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
				
				LinkedHashMap<String,Object> TransactionHistory = new LinkedHashMap<String,Object>();
				TransactionHistory = (LinkedHashMap<String, Object>) mySession.getVariableField("HashMap", "TransactionHistory").getObjectValue();
				TransactionHistory.put("VC_CLI_NO", mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
				
				
				//Language Set 
				
				mySession.getVariableField("DynamicPrompt","PromptLanguage").setValue(parseJsonResponse(customerObject, "CustomerLanguage",mySession).toUpperCase());
				mySession.getVariableField("ApplicationVariable", "Language").setValue(parseJsonResponse(customerObject, "CustomerLanguage",mySession).toUpperCase());
				
				custDetails(customerObject, mySession);
				
				

	            JSONObject jsonObject = (JSONObject) new JSONParser().parse(resp);
	            
	            // Extract the schema object
	            JSONObject schemaObject2 = (JSONObject) jsonObject.get("schema");
	            
	            // Extract ServiceMap object from the schema
	            JSONObject serviceMap = (JSONObject) schemaObject2.get("ServiceMap");
	            
	            // Get the first service object (assuming it exists)
	            JSONObject serviceObject = (JSONObject) serviceMap.get("1");
	            
	            // If service object exists, get the ServiceType field
	            if (serviceObject != null) {
	                JSONArray serviceTypeArray = (JSONArray) ((JSONObject) serviceObject.get("attributes")).get("ServiceType");
	                String serviceType = (String) serviceTypeArray.get(0);
	                JSONArray ChannelArray = (JSONArray) ((JSONObject) serviceObject.get("attributes")).get("Channel");
	                String Channel = (String) ChannelArray.get(0);
	                JSONArray LanguageArray = (JSONArray) ((JSONObject) serviceObject.get("attributes")).get("Language");
	                String Language = (String) LanguageArray.get(0);
	                JSONArray LocationArray = (JSONArray) ((JSONObject) serviceObject.get("attributes")).get("Location");
	                String Location = (String) LocationArray.get(0);
	                JSONArray CustomerTierArray = (JSONArray) ((JSONObject) serviceObject.get("attributes")).get("CustomerTier");
	                String CustomerTier = (String) CustomerTierArray.get(0);
	                
	                mySession.getVariableField(IProjectVariables.SERVICEMAP,IProjectVariables.SERVICEMAP_FIELD_SERVICETYPE).setValue(serviceType);
					mySession.getVariableField("Service").setValue(serviceType);
					
	            } else {
	                System.out.println("No service object found with key '1' within ServiceMap.");
	            }

				
				
				
				mySession.getVariableField("customerId").setValue(parseJsonResponse(schemaObject, "CustomerId",mySession));
				
				
				
				mySession.getVariableField("ident_type").setValue(parseJsonResponse(customerObject, "ident_type",mySession));
				mySession.getVariableField("WS_IdentifyCustomerDetails","RequestType").setValue(mySession.getVariableField("ident_type").getStringValue());

					
				HashMap<String, Object> IdentifyCallerResponse = (HashMap<String, Object>) mySession.getVariableField("WS_IdentifyCustomerDetails","FfpResponseMap").getObjectValue();
				IdentifyCallerResponse.put("Response", IdentifyCallerResponse);
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "FfpResponseMap : "+IdentifyCallerResponse.toString());
				mySession.getVariableField(IProjectVariables.VBSTATUS).setValue(parseJsonResponse(customerObject, GlobalConstant.VB_STATUS,mySession));
				mySession.getVariableField(IProjectVariables.VBSTATUSDATE).setValue(parseJsonResponse(customerObject, GlobalConstant.VB_STATUSDATE,mySession));
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "VB STATUS OBTIANED : "+mySession.getVariableField(IProjectVariables.VBSTATUS).getStringValue());
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "VB STATUS DATE OBTIANED : "+mySession.getVariableField(IProjectVariables.VBSTATUSDATE).getStringValue());
				
			
				}else {
					mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "---------------------------------Context Data not available-----------------------");	
				}
				
			
		}
			
		else {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,"UUI valeus obtined as null or empty ");
			mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
		}
		
		}
		catch(java.lang.Exception ex) 		
		{
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception caught : "+GetStackTrace.getMessage(ex));
			mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
		}
		
		super.requestBegin(mySession);
	}
	
	public String parseJsonResponse(JSONObject map , String key,SCESession mySession) {

		try 
		{
		String str = "NA";
		String value;

		if(map.get(key)!=null) {

			value = (String) map.get(key);

			if(value!=null && !value.isEmpty() && value.trim()!="null") {
				str = value.trim();
			}

		} else {
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR,"parseJSONResponse | EXCEPTION | parseJsonResponse | key not present | "+key, mySession);
		}
		
		return str;
		}
		catch(Exception ex) {
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception caught : "+GetStackTrace.getMessage(ex));
			mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
		}
		return null;
	}
	
	
	public void custDetails(JSONObject customerObject,SCESession mySession) {
		
		try {
			
		
		HashMap<String,String> customerDetails = (HashMap<String, String>) mySession.getVariableField("HashMap", "customerDetails").getObjectValue();
		
		customerDetails.put("MemberTier", mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
		
		String CustTier = mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue();
		if(! CustTier.equalsIgnoreCase("NA")) {
			if(!LoadApplicationProperties.getProperty(CustTier, mySession).equalsIgnoreCase("NA")) {
				CustTier = LoadApplicationProperties.getProperty(CustTier, mySession);
			}
			mySession.getVariableField("CustTier").setValue(CustTier);
			mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).setValue(CustTier);
			mySession.getVariableField("CustTier").setValue(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
			customerDetails.put("MemberTier", mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
		}
		mySession.getVariableField("CustTier").setValue(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
		mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "CustTier : "+mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
		
			customerDetails.put("Channel", parseJsonResponse(customerObject, "Channel",mySession));
			customerDetails.put("AppLocation", parseJsonResponse(customerObject, "AppLocation",mySession));
			customerDetails.put("CustomerName", parseJsonResponse(customerObject, "CustomerName",mySession));
			customerDetails.put("DoB", parseJsonResponse(customerObject, "DoB",mySession));
			
			customerDetails.put("CustomerNumber", parseJsonResponse(customerObject, "CustomerNumber",mySession));
			customerDetails.put("CallEndReason", parseJsonResponse(customerObject, "CallEndReason",mySession));
			customerDetails.put("CustomerLanguage", parseJsonResponse(customerObject, "CustomerLanguage",mySession));
			
			customerDetails.put("PNR", parseJsonResponse(customerObject, "PNR",mySession));
			
			customerDetails.put("CustomerID", parseJsonResponse(customerObject, "CustomerID",mySession));
			
			customerDetails.put("BookingChannel", parseJsonResponse(customerObject, "BookingChannel",mySession));
			customerDetails.put("BookingClass", parseJsonResponse(customerObject, "BookingClass",mySession));
			customerDetails.put("FareFamily", parseJsonResponse(customerObject, "FareFamily",mySession));
			customerDetails.put("TicketStatus", parseJsonResponse(customerObject, "TicketStatus",mySession));
			
			customerDetails.put("FFPNumber", parseJsonResponse(customerObject, "FFPNumber",mySession));
			
			customerDetails.put("IATANumber", parseJsonResponse(customerObject, "IATANumber",mySession));
			customerDetails.put("StaffID", parseJsonResponse(customerObject, "StaffID",mySession));
			customerDetails.put("CustomerTier", parseJsonResponse(customerObject, "CustomerTier",mySession));
			
			//need to update the customer tier from BG to Burgundy
			customerDetails.put("IsIdentifiedCustomer", parseJsonResponse(customerObject, "IsIdentifiedCustomer",mySession));
			customerDetails.put("IsVerifiedCustomer", parseJsonResponse(customerObject, "IsVerifiedCustomer",mySession));

			customerDetails.put("CustomerStatus", parseJsonResponse(customerObject, "CustomerStatus",mySession));
			customerDetails.put("IsBlacklisted", parseJsonResponse(customerObject, "IsBlacklisted",mySession));
			customerDetails.put("Dnis", parseJsonResponse(customerObject, "Dnis",mySession));
			customerDetails.put("CountryName", parseJsonResponse(customerObject, "CountryName",mySession));
			customerDetails.put("IsPreferredLanguage", parseJsonResponse(customerObject, "IsPreferredLanguage",mySession));
			customerDetails.put("ServiceType", parseJsonResponse(customerObject, "ServiceType",mySession));
			customerDetails.put("DisruptionStatus", parseJsonResponse(customerObject, "DisruptionStatus",mySession));
			customerDetails.put("TravelWithin48Hours", parseJsonResponse(customerObject, "TravelWithin48Hours",mySession));
			customerDetails.put("BusinessUnit", parseJsonResponse(customerObject, "BusinessUnit",mySession));
			customerDetails.put("CustomerCallCount", parseJsonResponse(customerObject, "CustomerCallCount",mySession));
			customerDetails.put("VB_Status", parseJsonResponse(customerObject, "VB_Status",mySession));
			customerDetails.put("VB_Status_Date", parseJsonResponse(customerObject, "VB_Status_Date",mySession));
			
			customerDetails.put("VB_Enrollment_Failed", parseJsonResponse(customerObject, "VB_Enrollment_Failed",mySession));
			customerDetails.put("Verified_via_vb", parseJsonResponse(customerObject, "Verified_via_vb",mySession));
			customerDetails.put("De_enrolled_caller_from_Vb", parseJsonResponse(customerObject, "De_enrolled_caller_from_Vb",mySession));
			customerDetails.put("VB_enrollment_status", parseJsonResponse(customerObject, "VB_enrollment_status",mySession));
			customerDetails.put("VB_enrollment_status_date", parseJsonResponse(customerObject, "VB_enrollment_status_date",mySession));
			customerDetails.put("VB_verification_status", parseJsonResponse(customerObject, "VB_verification_status",mySession));
			customerDetails.put("VB_verification_status_date", parseJsonResponse(customerObject, "VB_verification_status_date",mySession));
			customerDetails.put("ucid", parseJsonResponse(customerObject, "ucid",mySession));
			customerDetails.put("configSetName", parseJsonResponse(customerObject, "configSetName",mySession));
			customerDetails.put("voiceprintTag", parseJsonResponse(customerObject, "voiceprintTag",mySession));
			customerDetails.put("CountryName", parseJsonResponse(customerObject, "CountryName",mySession));
			customerDetails.put("CustomerLanguage", parseJsonResponse(customerObject, "CustomerLanguage",mySession));
			customerDetails.put(GlobalConstant.CountryCode,parseJsonResponse(customerObject, GlobalConstant.CountryCode,mySession));
			customerDetails.put(GlobalConstant.Email,parseJsonResponse(customerObject, GlobalConstant.Email,mySession));
			
			//need to check
			if("NA".equalsIgnoreCase(parseJsonResponse(customerObject, "SourceSystem",mySession))) {
				customerDetails.put("SourceSystem","0");
			}else {
				customerDetails.put("SourceSystem",parseJsonResponse(customerObject, "SourceSystem",mySession));
			}
			
			
			
			if(customerDetails.get("FFPNumber") == null || "NA".equalsIgnoreCase(customerDetails.get("FFPNumber")) || "".equalsIgnoreCase(customerDetails.get("FFPNumber")) ||
					"N".equalsIgnoreCase(parseJsonResponse(customerObject, "IsIdentifiedCustomer",mySession))
			|| "N".equalsIgnoreCase(parseJsonResponse(customerObject, "IsVerifiedCustomer",mySession))) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "FFPNumber is null or NA or IsVerifiedCustomer may be N or IsIdentifiedCustomer may be N ");

				mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
			}
			
			mySession.getVariableField("WS_IdentifyCustomerDetails","FfpResponseMap").setValue(customerDetails);
			//changes
			if("NA".equalsIgnoreCase(parseJsonResponse(customerObject, "ELG",mySession)) || "".equalsIgnoreCase(parseJsonResponse(customerObject, "ELG",mySession)) ||
					"null".equalsIgnoreCase(parseJsonResponse(customerObject, "ELG",mySession))){
			VBHist vbhistory = new VBHist();
			vbhistory.setDT_STATUS_UPDATE_DATE(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()).toString());
			vbhistory.setVC_CHANNEL(GlobalConstant.AGENT_ASSIST);
			vbhistory.setVC_WORK_REQUEST_ID(mySession.getVariableField(IProjectVariables.CONTEXTID).getStringValue());
			vbhistory.setVC_DE_ENROLL_REASON(GlobalConstant.NA);
			vbhistory.setVC_DE_ENROLLED_AGENT_ID(GlobalConstant.NA);
			vbhistory.setVC_DE_ENROLLED_AGENT_ROLE(GlobalConstant.NA);
			vbhistory.setVC_FFP_NUMBER(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_FFPNUMBER).getStringValue());
			vbhistory.setVC_IDENTIFY_TYPE(parseJsonResponse(customerObject, "ident_type",mySession));
			vbhistory.setVC_SEGMENT(mySession.getVariableField(IProjectVariables.CUSTOMERDETAILS,IProjectVariables.CUSTOMERDETAILS_FIELD_MEMBERTIER).getStringValue());
			vbhistory.setVC_STATUS(GlobalConstant.YES);
			vbhistory.setVC_UCID(mySession.getVariableField("session", "ucid").getStringValue());
			vbhistory.setVC_TRANSFERRED_BY_AGENT_ID(mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ID).getStringValue());//obtained from agent
			vbhistory.setVC_TRANSFERRED_BY_AGENT_ROLE(mySession.getVariableField(IProjectVariables.VC__TRANSFERRED__BY__AGENT__ROLE).getStringValue());//obtained from agent
			vbhistory.setVC_VB_REASON("ELIGIBLE");
			vbhistory.setVC_FUNCTION_NAME("ELIGIBLE_CHECK");
			
			mySession.setProperty("vbmap", vbhistory);
			
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_DEBUG, "input sent from IVR : "+mySession.getProperty("vbmap").toString(),mySession);
			customerDetails.put("ELG","ELIGIBLE");
			Load load = new Load();
			String method = "VBHistory";
			load.values(method, mySession);
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Eligibility is set in IVR DB");
			}
			else {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Eligibility Values obtained from connect back "+parseJsonResponse(customerObject, "ELG",mySession));
				customerDetails.put("ELG","ELIGIBLE");
			}
			mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_DEBUG, "Customer details obtained from Transfer back call and set in IVR : "+customerDetails.toString());
			
			
			}
			catch(Exception ex) {
				mySession.getTraceOutput().writeln(ITraceInfo.TRACE_LEVEL_ERROR,"Exception caught  : "+GetStackTrace.getMessage(ex)+" in setting customer details ");
				mySession.getVariableField(IProjectVariables.START_SESSION_WS, IProjectVariables.START_SESSION_WS_FIELD_EXCEPTION).setValue(true);
			}
			
		}
	
}
