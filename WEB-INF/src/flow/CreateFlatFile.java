package flow;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;

import com.DBOperation.FlatFile;
import com.General.AppConstants;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;
import com.flow.DataNode;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 2022-APR-20  11:57:02 AM
 */
public class CreateFlatFile extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2022-APR-20  11:57:02 AM
	 */
	public CreateFlatFile() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		try {

			DataNode datanode = new DataNode();

			String className = "CreateFlatFile";
			String method = "requestBegin";

			String isCallHistoryInserted = mySession.getVariableField("ApplicationVariable", "IsCallHistoryInserted").getStringValue();

			if(isCallHistoryInserted.equalsIgnoreCase("false")) {

				HashMap<String,String> CallHistory = new HashMap<String,String>();
				LinkedHashMap<String, Object> input = new LinkedHashMap<String, Object>();

				CallHistory = (HashMap<String, String>) mySession.getVariableField("HashMap", "CallHistory").getObjectValue();

				CallHistory.put("DT_END_DATE",new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()));

				//Calculating Duration
				SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

				try {

					Date StartDate = sdf.parse(CallHistory.get("DT_START_DATE"));
					Date EndDate = sdf.parse(CallHistory.get("DT_END_DATE"));

					long difference_In_Seconds = (EndDate.getTime() - StartDate.getTime())/ 1000;

					CallHistory.put("NU_CALL_DURATION", Long.toString(difference_In_Seconds));

					CallHistory.put("DT_ORIGIN_START_DATE",datanode.getGMTTime(CallHistory.get("DT_START_DATE"),CallHistory.get("VC_TIME_ZONE"), mySession));
					CallHistory.put("DT_ORIGIN_END_DATE",datanode.getGMTTime(CallHistory.get("DT_END_DATE"),CallHistory.get("VC_TIME_ZONE"), mySession));

				} catch (Exception e) {

					TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, className +"\t|\t"+ method +"\t|\t"+ AppConstants.EXCEPTION_1+e.getMessage()+AppConstants.EXCEPTION_2 , mySession);

				}

				String PromptLanguage = mySession.getVariableField("DynamicPrompt","PromptLanguage").getStringValue();

				if(PromptLanguage.contains(",")) {
					CallHistory.put("VC_LANGUAGE","");
				}

				input.put("VC_UCID", CallHistory.get("VC_UCID"));
				input.put("VC_FLOW", CallHistory.get("VC_FLOW"));
				input.put("VC_MARKET", CallHistory.get("VC_MARKET"));
				input.put("VC_LINE_TYPE", CallHistory.get("VC_LINE_TYPE"));
				input.put("VC_CLI_NO", CallHistory.get("VC_CLI_NO"));
				input.put("VC_DNIS", CallHistory.get("VC_DNIS"));
				input.put("VC_LANGUAGE", CallHistory.get("VC_LANGUAGE"));
				input.put("VC_TIME_ZONE", CallHistory.get("VC_TIME_ZONE"));
				input.put("DT_START_DATE", CallHistory.get("DT_START_DATE"));
				input.put("DT_END_DATE", CallHistory.get("DT_END_DATE"));
				input.put("DT_ORIGIN_START_DATE", CallHistory.get("DT_ORIGIN_START_DATE"));
				input.put("DT_ORIGIN_END_DATE", CallHistory.get("DT_ORIGIN_END_DATE"));
				input.put("NU_CALL_DURATION", CallHistory.get("NU_CALL_DURATION"));
				input.put("VC_GDPR_STATUS", CallHistory.get("VC_GDPR_STATUS"));
				input.put("VC_SURVEY_CONSENT", CallHistory.get("VC_SURVEY_CONSENT"));
				input.put("VC_MENU_DESCRIPTION", CallHistory.get("VC_MENU_DESCRIPTION"));
				input.put("VC_CALLER_SEGMENT", CallHistory.get("VC_CALLER_SEGMENT"));
				input.put("VC_EXIT_LOCATION", CallHistory.get("VC_EXIT_LOCATION"));
				input.put("VC_CALL_END_TYPE", CallHistory.get("VC_CALL_END_TYPE"));
				input.put("VC_TRANSFER_VDN", CallHistory.get("VC_TRANSFER_VDN"));
				input.put("VC_UUI", CallHistory.get("VC_UUI"));
				input.put("VC_WORK_REQUEST_ID", CallHistory.get("VC_WORK_REQUEST_ID"));
				input.put("VC_SESSION_MPP_ID", CallHistory.get("VC_SESSION_MPP_ID"));
				input.put("VC_APP_SRVR_IP", CallHistory.get("VC_APP_SRVR_IP"));
				input.put("VC_CALL_STATUS", CallHistory.get("VC_CALL_STATUS"));

				FlatFile ch = new FlatFile();
				String InsertQuery = "INSERT INTO IVR_CALL_HISTORY values(";
				ch.writeToFile(InsertQuery,"CallHistory", input, mySession);

			}

		} catch(Exception e) {

			mySession.getVariableField(IProjectVariables.ERROR).setValue(true);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "PostMenu\t|\trequestBegin\t|\t"+ AppConstants.EXCEPTION_1+ e.getMessage() +AppConstants.EXCEPTION_2 , mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "PostMenu\t|\trequestBegin\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);

		}

		super.requestBegin(mySession);
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("Disconnect", "Default");
		next.setDebugId(334);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
