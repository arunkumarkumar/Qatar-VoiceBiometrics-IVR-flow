package flow;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;

import com.General.AppConstants;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

/**
 * Class that represents a menu.  A menu can contain prompts, choices and links
 * as well as handlers for various events that may occur while the menu is executing
 * Last generated by Orchestration Designer at: 2021-JUN-06  09:12:31 PM
 */
public class DynamicMenu extends com.avaya.sce.runtime.Menu {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 2021-JUN-06  09:12:31 PM
	 */
	public DynamicMenu() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		setNeedsDefaultDisconnectHandler(false);
		//}}END:CLASS:CONSTRUCTOR
	}

	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the links for the node, override:
	 *     void updateLinks(Collection links, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 * @return a collection of links
	 */
	public java.util.Collection getLinks(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Link link;
		java.util.List list;
		java.util.Collection grammarInfo = null;
		java.util.Collection<com.avaya.sce.runtime.CaptureExpression> captureExpr = null;
		// This item does not have any defined links
		list = new java.util.ArrayList();
		String ___tempGrammarName = null;

		return(list);
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the properties for the node, override:
	 *     void updateProperties(Collection properties, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 * @return a collection of properties
	 */
	public java.util.Collection getProperties(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Property property;
		java.util.List list;
		// This item does not have any defined properties
		list = new java.util.ArrayList();

		return(list);
	}
	/**
	 * This method is generated automatically and should not be manually edited.
	 * To manually edit the event handlers for the node, override:
	 *    void updateEvents(Collection events, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 * @return a collection of Events
	 */
	public java.util.Collection getEvents(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list;
		com.avaya.sce.runtime.Event event;
		list = new java.util.ArrayList(2);
		java.util.List eventPromptNames = null;
		String ___tempPromptName = null;

		// Item has no prompts associated
		eventPromptNames = new java.util.ArrayList();

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOINPUT, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("DynamicNINM", 0, true, ""));
		list.add(event);

		// Item has no prompts associated
		eventPromptNames = new java.util.ArrayList();

		event = new com.avaya.sce.runtime.Event(com.avaya.sce.runtimecommon.SCERT.EVENT_NOMATCH, (com.avaya.sce.runtime.PromptRefInfo[])eventPromptNames.toArray(new com.avaya.sce.runtime.PromptRefInfo[0]), new com.avaya.sce.runtime.Goto("DynamicNINM", 0, true, ""));
		list.add(event);
		return(list);
	}
	/**
	 * Builds the list of choices for the menu.  This list is built
	 * automatically by the code generator and should not be edited
	 * manually.  Future code generation may overwrite any changes
	 * to this method.<br>
	 * To modify the list of choices, override:<br>
	 *    updateChoices(Collection choices, SCESession mySession)
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public java.util.Collection getChoices(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		com.avaya.sce.runtime.Choice choice = null;
		java.util.Collection grammarInfo = null;
		list = new java.util.ArrayList(1);
		String ___tempGrammarName = null;

		// build the list of grammar information objects for the choice
		grammarInfo = new java.util.ArrayList();


		choice = new com.avaya.sce.runtime.Choice("Default", "#90*", true, "exact", "PostMenu", grammarInfo, true);
		list.add(choice);

		return(list);
	}
	
	@Override
	public void updateChoices(Collection choices, SCESession mySession) {

		java.util.Collection grammarInfo = null;
		com.avaya.sce.runtime.Choice choice = null;
		grammarInfo = new java.util.ArrayList();

		try {

			int j = 0;

			HashMap<String,String> MenuList = new HashMap<String,String>();

			MenuList = (HashMap<String, String>) mySession.getVariableField("ApplicationVariable", "MenuList").getObjectValue();

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, "DynamicMenu\t|\tupdateChoices\t|\tLoading Menu Choices", mySession);

			for(int i=0;i<10;i++){

				if(MenuList.containsKey(Integer.toString(i))) {

					choice = new com.avaya.sce.runtime.Choice(MenuList.get(Integer.toString(i)), Integer.toString(i), true, "exact", "PostMenu", grammarInfo, true);
					choices.add(choice);

				}

			}

			if(MenuList.containsKey("#")) {

				choice = new com.avaya.sce.runtime.Choice(MenuList.get("#"), "#", true, "exact", "PostMenu", grammarInfo, true);
				choices.add(choice);

			}

			if(MenuList.containsKey("*")) {

				choice = new com.avaya.sce.runtime.Choice(MenuList.get("*"), "*", true, "exact", "PostMenu", grammarInfo, true);
				choices.add(choice);

			}

		} catch(Exception e) {

			mySession.getVariableField(IProjectVariables.ERROR).setValue(true);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "DynamicMenu\t|\tupdateChoices\t|\t"+ AppConstants.EXCEPTION_1+ e.getMessage() +AppConstants.EXCEPTION_2 , mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "DynamicMenu\t|\tupdateChoices\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);

		}

		super.updateChoices(choices, mySession);
	}
	
	/**
	 * Builds the list of prompts that are used by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.  To modify the list
	 * of prompts for the flow item, override:
	 *     updatePrompts(Collection prompts, SCESession mySession)
	 * @return list of prompts for the menu
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public java.util.Collection getPrompts(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;
		String ___tempPromptName = null;
		// build the list of prompt names
		list = new java.util.ArrayList(1);
		
		list.add(new com.avaya.sce.runtime.PromptRefInfo("DynamicPrompt", ""));

		return(list);
	}
	/**
	 * Builds the list of tracking items that are generated by this flow item<br>
	 * This method is generated automatically and changes to it may
	 * be overwritten next time code is generated.
	 * @return list of tracking items for the item
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:42 AM
	 */
	public java.util.Collection getTrackingActions(com.avaya.sce.runtimecommon.SCESession mySession) {
		java.util.List list = null;

		// Item has no tracking items.
		list = new java.util.ArrayList();
		return(list);
	}
}
