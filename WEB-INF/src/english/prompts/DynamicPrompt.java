/**
 * Last generated by Orchestration Designer at: 2021-JUN-06  09:13:10 PM
 */
package english.prompts;

import java.util.Arrays;
import java.util.HashMap;

import com.General.AppConstants;
import com.avaya.sce.runtime.tracking.TraceInfo;
import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;

import flow.IProjectVariables;

public class DynamicPrompt extends com.avaya.sce.runtime.Prompt {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Constructor for DynamicPrompt.
	 */
	public DynamicPrompt() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}


	/**
	 * This method is generated automatically and should not be manually edited
	 * To manually edit the prompt, override:
	 * void updatePrompt()
	 * Last generated by Orchestration Designer at: 2024-MAR-29  10:23:34 AM
	 */
	public void buildPrompt(){
		com.avaya.sce.runtime.Format format = null;
		com.avaya.sce.runtime.RenderHint hint = null;
		com.avaya.sce.runtime.MediaPage mediaPage = null;
		setBarginType(com.avaya.sce.runtimecommon.SCERT.BARGIN_SPEECH);
		setName("DynamicPrompt");
		setOrder(com.avaya.sce.runtime.Prompt.STANDARD);

		// Prompt level 1
		setTimeout(1,8000);
		setBargin(1,true);

	}

	@Override
	public void updatePrompt(SCESession mySession) {

		try {

			String className = "DynamicPrompt";
			String method = "updatePrompt";

			com.avaya.sce.runtime.Format format = null;

			String PromptLocation = mySession.getVariableField("DynamicPrompt","PromptLocation").getStringValue();
			String PromptLanguage = mySession.getVariableField("DynamicPrompt","PromptLanguage").getStringValue();
			String NodeDescription = mySession.getVariableField("ApplicationVariable", "NodeDescription").getStringValue();

			boolean bargin = mySession.getVariableField("ApplicationVariable", "BargeIn").getBooleanValue();
			int timeout = mySession.getVariableField("ApplicationVariable", "Timeout").getIntValue();

			HashMap<Integer,String> prompts = new HashMap<Integer,String>();

			prompts = (HashMap<Integer, String>) mySession.getVariableField("DynamicPrompt", "Prompt").getObjectValue();

			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "PromptLocation | "+PromptLocation, mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "PromptLanguage | "+PromptLanguage, mySession);

			setBargin(1, bargin);
			setTimeout(1, timeout*1000);

			if(prompts.equals(null)||prompts.isEmpty()) {

				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_WARN, className +"\t|\t"+ method +"\t|\t"+ "Prompt is not Available", mySession);

			} else if(prompts.get(0).equalsIgnoreCase("NA")) {

				TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "No Prompt is Available", mySession);

			} else {

				int j=0;

				if(PromptLanguage.contains(",")) {

					String PromptLanguageList[] =  PromptLanguage.split(",");

					if(NodeDescription.equalsIgnoreCase("LANG_MENU")) {

						j=setLangPrompts(PromptLocation, PromptLanguageList, prompts, j, mySession);

					} else {

						for(int z=0;z<PromptLanguageList.length;z++) {

							PromptLanguage = PromptLanguageList[z];

							j=setPrompts(PromptLocation, PromptLanguage, prompts, j, mySession);

						}

					}

				} else {

					j=setPrompts(PromptLocation, PromptLanguage, prompts, j, mySession);

				}

			}

		} catch(Exception e) {

			mySession.getVariableField(IProjectVariables.ERROR).setValue(true);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "DynamicPrompt\t|\tupdatePrompt\t|\t"+ AppConstants.EXCEPTION_1+ e.getMessage() +AppConstants.EXCEPTION_2 , mySession);
			TraceInfo.trace(ITraceInfo.TRACE_LEVEL_ERROR, "DynamicPrompt\t|\tupdatePrompt\t|\t"+ Arrays.toString(e.getStackTrace()), mySession);

		}

		super.updatePrompt(mySession);

	}

	public int setPrompts(String PromptLocation, String PromptLanguage, HashMap<Integer,String> prompts, int promptVariable,SCESession mySession) {

		String className = "DynamicPrompt";
		String method = "setPrompts";
		String Prompt = "";

		com.avaya.sce.runtime.Format format = null;

		if(!PromptLocation.startsWith("/")) {
			PromptLocation = "/"+PromptLocation;
		}

		if(!PromptLocation.endsWith("/")) {

			if(PromptLanguage.equalsIgnoreCase("NA")&&PromptLanguage.isEmpty()) {
				PromptLocation += "/";
			} else {

				PromptLocation += "/"+PromptLanguage+"/";

			}

		} else {

			if(PromptLanguage.equalsIgnoreCase("NA")&&PromptLanguage.isEmpty()) {

			} else {
				PromptLocation += PromptLanguage+"/";
			}
		}

		for (int i=0;i<prompts.size();i++) {

			if(prompts.containsKey(i)) {

				Prompt = prompts.get(i);

				if(Prompt.contains(":")) {

					String PromptType = Prompt.split(":")[0];
					String PromptWavFile = Prompt.split(":")[1];

					switch(PromptType) {

					case "AudioURL" :{

						if(!PromptWavFile.endsWith(".wav")) {
							PromptWavFile = PromptWavFile+".wav";
						}

						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptLocation+PromptWavFile, mySession);

						mySession.getVariableField("Prompt"+promptVariable).setValue(PromptLocation+PromptWavFile);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "For a Variable\t|\t"+promptVariable+"\t|\tFinally FramedPrompt\t|\t"+mySession.getVariableField("Prompt"+promptVariable).getStringValue(), mySession);
						add(1,new com.avaya.sce.runtime.PhraseVariableElement("Prompt"+promptVariable, com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL,false));
						promptVariable++;
						
					}

					case "TTS" :{

						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

						add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.TEXT,PromptWavFile, null));

					}

					case "Date" :{

						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

						format = new com.avaya.sce.runtime.Format();
						format.add("format","date");
						format.add("Month Type","spokenmonth");
						format.add("Date Format","DMSPDYY");
						add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.VARIABLE_AUDIO, PromptWavFile,format,false));

					}

					case "TTSSpelling" :{

						PromptWavFile = PromptWavFile.replaceAll("..", "$0 ");

						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

						add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.TEXT,PromptWavFile, null));

					}

					}

				} else {

					if(!Prompt.equalsIgnoreCase("0")) {

						if(!Prompt.endsWith(".wav")) {
							Prompt = Prompt+".wav";
						}

						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptLocation+Prompt, mySession);

						mySession.getVariableField("Prompt"+promptVariable).setValue(PromptLocation+Prompt);
						TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "For a Variable\t|\t"+promptVariable+"\t|\tFinally FramedPrompt\t|\t"+mySession.getVariableField("Prompt"+promptVariable).getStringValue(), mySession);
						add(1,new com.avaya.sce.runtime.PhraseVariableElement("Prompt"+promptVariable, com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL,false));
						promptVariable++;
						
					}

				}

			}

		}

		return promptVariable;

	}

	public int setLangPrompts(String PromptLocation, String PromptLanguageList[], HashMap<Integer,String> prompts, int promptVariable,SCESession mySession) {

		String className = "DynamicPrompt";
		String method = "setPrompts";
		String Prompt = "";
		String tempPromptLocation = "";

		com.avaya.sce.runtime.Format format = null;

		if(!PromptLocation.startsWith("/")) {
			PromptLocation = "/"+PromptLocation;
		}
		tempPromptLocation = PromptLocation;
		for (int i=0;i<prompts.size();i++) {

			if(prompts.containsKey(i)) {

				Prompt = prompts.get(i);

				for(int z=0;z<PromptLanguageList.length;z++) {
					PromptLocation = tempPromptLocation;
					String PromptLanguage = PromptLanguageList[z];

					if(!PromptLocation.endsWith("/")) {

						if(PromptLanguage.equalsIgnoreCase("NA")&&PromptLanguage.isEmpty()) {
							PromptLocation += "/";
						} else {

							PromptLocation += "/"+PromptLanguage+"/";

						}

					} else {

						if(PromptLanguage.equalsIgnoreCase("NA")&&PromptLanguage.isEmpty()) {

						} else {
							PromptLocation += PromptLanguage+"/";
						}
					}


					if(Prompt.contains(":")) {

						String PromptType = Prompt.split(":")[0];
						String PromptWavFile = Prompt.split(":")[1];

						switch(PromptType) {

						case "AudioURL" :{

							if(!PromptWavFile.endsWith(".wav")) {
								PromptWavFile = PromptWavFile+".wav";
							}

							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptLocation+PromptWavFile, mySession);

							mySession.getVariableField("Prompt"+promptVariable).setValue(PromptLocation+PromptWavFile);
							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "For a Variable\t|\t"+promptVariable+"\t|\tFinally FramedPrompt\t|\t"+mySession.getVariableField("Prompt"+promptVariable).getStringValue(), mySession);
							add(1,new com.avaya.sce.runtime.PhraseVariableElement("Prompt"+promptVariable, com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL,false));
							promptVariable++;
							
						}

						case "TTS" :{

							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

							add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.TEXT,PromptWavFile, null));

						}

						case "Date" :{

							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

							format = new com.avaya.sce.runtime.Format();
							format.add("format","date");
							format.add("Month Type","spokenmonth");
							format.add("Date Format","DMSPDYY");
							add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.VARIABLE_AUDIO, PromptWavFile,format,false));

						}

						case "TTSSpelling" :{

							PromptWavFile = PromptWavFile.replaceAll("..", "$0 ");

							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptWavFile, mySession);

							add(1, new com.avaya.sce.runtime.PromptElement(com.avaya.sce.runtime.PromptElement.TEXT,PromptWavFile, null));

						}

						}

					} else {

						if(!Prompt.equalsIgnoreCase("0")) {

							if(!Prompt.endsWith(".wav")) {
								Prompt = Prompt+".wav";
							}

							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "FramedPrompt\t|\t"+PromptLocation+Prompt, mySession);

							mySession.getVariableField("Prompt"+promptVariable).setValue(PromptLocation+Prompt);
							TraceInfo.trace(ITraceInfo.TRACE_LEVEL_INFO, className +"\t|\t"+ method +"\t|\t"+ "For a Variable\t|\t"+promptVariable+"\t|\tFinally FramedPrompt\t|\t"+mySession.getVariableField("Prompt"+promptVariable).getStringValue(), mySession);
							add(1,new com.avaya.sce.runtime.PhraseVariableElement("Prompt"+promptVariable, com.avaya.sce.runtime.PhraseVariableElement.Type.AUDIO_URL,false));
							promptVariable++;
							
						}

					}
				
				}
				
			}

		}

		return promptVariable;

	}

}
